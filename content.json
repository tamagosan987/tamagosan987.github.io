{"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2023/02/19/hello-world/"},{"title":"My New Post","text":"","link":"/2023/02/19/My-New-Post-1/"},{"title":"My New Post","text":"lalala","link":"/2023/02/19/My-New-Post/"},{"title":"Design Youtube","text":"requirementsfunctional upload a video watch a video api designhttps://developers.google.com/youtube/v3/docs/videos/insert#request capacity estimationhigh-level architecture design database (schema, sql/nosql, sharding, replication)other topicsreference https://www.infoq.com/presentations/netflix-play-api/ https://netflixtechblog.com/high-quality-video-encoding-at-scale-d159db052746 https://openconnect.netflix.com/Open-Connect-Overview.pdf https://netflixtechblog.com/netflix-conductor-a-microservices-orchestrator-2e8d4771bf40","link":"/2023/02/19/Design-Youtube/"},{"title":"系统设计套路","text":"requirement functional non-functional 设计monitoring system，那availability就是重中之重 力求在15分钟以内说完 usage pattern（是read heavy还是write heavy） scalability highly available consistency（strong consistency，还是eventual consistency，是否需要read-your-own-write consistency） latency是否有要求 data durability是否有要求 idempotency（对于付款相关的系统一定强调这个） API design 对于每个API，定好名字，定好输入是哪些，输出是哪些就行了 RPC还是Rest API Rest API的知识 synchronized API和asynchronized API (比如有的时候一个操作需要执行很久，这时候一般选择设计一个async API先立刻返回一个id给caller，让caller拿着id去查询操作的执行情况，而不应该只设计一个sync API让caller一直阻塞在那里) Capacity estimation。算QPS和bandwidth的时候，要把average value和peak value都算一下 QPS (read, write) network bandwidth(upload, download) disk storage(算disk storage的时候，直接说“假设我们存5年的数据”，因为5年约等于2000天，好算，同时不要忘记存在disk上的数据都有replication，一般直接说”let’s assume the replication factor is 3”，然后乘以3就行了。) High-level architecture design。 Database (schema, sql/nosql, sharding, replication)。 说schema的时候一般说一下有哪些表，每张表有哪些column，谁是primary key就行了。 sql/nosql(根据具体情况来，比如订票系统，牵扯到多张表的distributed transaction，那么只能是sql，还有购物相关的系统，user-order-item这些东西是天生relational的，那么sql也是更好的选择。) sharding (一般都有一个”shard by user id”还是”shard by item id”的trade off，如果是user id，那么会有Hotspotting问题（因为有的user特别活跃），如果是item id，虽然可以解决hotspotting问题，但是如果需要读某个user的数据，就需要访问所有的shard。) 6.Other topics（cache/how to scale/push vs. pull/monitoring/rate limiting/failure handling/logging）。 from: https://www.1point3acres.com/bbs/thread-768263-1-1.html","link":"/2023/02/19/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E5%A5%97%E8%B7%AF/"}],"tags":[{"name":"leetcode","slug":"leetcode","link":"/tags/leetcode/"},{"name":"sd","slug":"sd","link":"/tags/sd/"}],"categories":[],"pages":[]}